Description: >
  ElastiCache memcached cluster

Parameters:
  CacheNodeType:
    Description: The compute and memory capacity of the nodes in the node group (shard).
    Type: String
    Default: cache.t2.medium
  NumCacheNodes:
    Description: The initial number of cache nodes that the cluster has.
    Type: Number
    Default: 1
  SubDomainNameWithDot:
    Description: Name of sub domain domain 
    Type: String
    Default: caching
  # LogsRetentionInDays:
  #   Description: 'Specifies the number of days you want to retain log events in the specified log group.'
  #   Type: Number
  #   Default: 14
  #   AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Conditions:
  HasSingleCacheNode: !Equals [!Ref NumCacheNodes, '1']

Resources:
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue PublicHostedZone
      Name: !Join ['', [!Ref SubDomainNameWithDot, ., !ImportValue PublicHostedZoneUrl, .]]
      ResourceRecords:
      - !GetAtt CacheCluster.ConfigurationEndpoint.Address
      TTL: 60
      Type: CNAME

  CacheParameterGroupName:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: memcached1.4
      Description: !Ref AWS::StackName
      Properties: {}

  CacheSubnetGroupName:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: !Ref AWS::StackName
      SubnetIds: [!ImportValue core-vpc-PrivateSubnet1AID, !ImportValue core-vpc-PrivateSubnet1BID]
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      VpcId: !ImportValue core-vpc-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 11211
        ToPort: 11211
        SourceSecurityGroupId: sg-eac18797
  
  SecurityGroupInServices:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
      SourceSecurityGroupId: !ImportValue do-ecs-infrastructure-EcsHostSecurityGroup

  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      ClusterName: !Ref SubDomainNameWithDot
      AutoMinorVersionUpgrade: true
      AZMode: !If [HasSingleCacheNode, 'single-az', 'cross-az']
      CacheNodeType: !Ref CacheNodeType
      CacheParameterGroupName: !Ref CacheParameterGroupName
      CacheSubnetGroupName: !Ref CacheSubnetGroupName
      Engine: memcached
      EngineVersion: 1.4.34
      # NotificationTopicArn: !If [HasAlertTopic, {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}, !Ref 'AWS::NoValue']
      NumCacheNodes: !Ref NumCacheNodes
      # PreferredAvailabilityZones: !Split [',', !GetAtt 'PreferredAvailabilityZonesSelector.PreferredAvailabilityZones']
      PreferredMaintenanceWindow: 'sat:07:00-sat:08:00'
      VpcSecurityGroupIds:
      - !Ref SecurityGroup
  # ClusterCPUUtilizationTooHighAlarm:
  #   Condition: HasAlertTopic
  #   Type: 'AWS::CloudWatch::Alarm'
  #   Properties:
  #     AlarmActions:
  #     - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  #     AlarmDescription: 'Average CPU utilization over last 10 minutes too high.'
  #     ComparisonOperator: GreaterThanThreshold
  #     Dimensions:
  #     - Name: CacheClusterId
  #       Value: !Ref CacheCluster
  #     EvaluationPeriods: 1
  #     MetricName: CPUUtilization
  #     Namespace: 'AWS/ElastiCache'
  #     OKActions:
  #     - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  #     Period: 600
  #     Statistic: Average
  #     Threshold: 80
  # ClusterSwapUsageTooHighAlarm:
  #   Condition: HasAlertTopic
  #   Type: 'AWS::CloudWatch::Alarm'
  #   Properties:
  #     AlarmActions:
  #     - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  #     AlarmDescription: 'Average swap usage over last 10 minutes too high, performance may suffer.'
  #     ComparisonOperator: GreaterThanThreshold
  #     Dimensions:
  #     - Name: CacheClusterId
  #       Value: !Ref CacheCluster
  #     EvaluationPeriods: 1
  #     MetricName: SwapUsage
  #     Namespace: 'AWS/ElastiCache'
  #     OKActions:
  #     - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  #     Period: 600
  #     Statistic: Average
  #     Threshold: 256000000 # 256 Megabyte in Byte
  # ClusterEvictionsTooHighAlarm:
  #   Condition: HasAlertTopic
  #   Type: 'AWS::CloudWatch::Alarm'
  #   Properties:
  #     AlarmActions:
  #     - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  #     AlarmDescription: 'Evictions over last 10 minutes too high, memory may to less for all keys.'
  #     ComparisonOperator: GreaterThanThreshold
  #     Dimensions:
  #     - Name: CacheClusterId
  #       Value: !Ref CacheCluster
  #     EvaluationPeriods: 10
  #     MetricName: Evictions
  #     Namespace: 'AWS/ElastiCache'
  #     OKActions:
  #     - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1000
  # CustomResourceLambdaRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: 'lambda.amazonaws.com'
  #         Action: 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #     - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  # CustomResourceLambdaFunction: # needs no monitoring because it is used as a custom resource
  #   Type: 'AWS::Lambda::Function'
  #   Properties:
  #     Code:
  #       ZipFile: |
  #         'use strict';
  #         const response = require('cfn-response');
  #         exports.handler = (event, context, cb) => {
  #           const nodes = parseInt(event.ResourceProperties.NumCacheNodes, 10);
  #           const azs = event.ResourceProperties.AvailabilityZones.split(',');
  #           const preferredAZs = Array(nodes).fill('').map((v, i) => azs[i % azs.length]);
  #           response.send(event, context, response.SUCCESS, {
  #             PreferredAvailabilityZones: preferredAZs.join(',')
  #           });
  #         };
  #     Handler: 'index.handler'
  #     MemorySize: 128
  #     Role: !GetAtt 'CustomResourceLambdaRole.Arn'
  #     Runtime: 'nodejs6.10'
  #     Timeout: 60
  # CustomResourceLambdaLogGroup:
  #   Type: 'AWS::Logs::LogGroup'
  #   Properties:
  #     LogGroupName: !Sub '/aws/lambda/${CustomResourceLambdaFunction}'
  #     RetentionInDays: !Ref LogsRetentionInDays
  # PreferredAvailabilityZonesSelector:
    # Type: 'Custom::PreferredAvailabilityZonesSelector'
    # DependsOn: CustomResourceLambdaLogGroup
    # Version: '1.0'
    # Properties:
    #   NumCacheNodes: !Ref NumCacheNodes
    #   AvailabilityZones: !Join [',', !GetAZs '']
    #   ServiceToken: !GetAtt 'CustomResourceLambdaFunction.Arn'
Outputs:
  StackName:
    Description: Stack name.
    Value: !Sub ${AWS::StackName}
  ClusterName:
    Description: The name of the cluster
    Value: !Ref CacheCluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName
  CacheClusterUrl:
    Description: The DNS address of the configuration endpoint for the Memcached cache cluster.
    Value: !GetAtt CacheCluster.ConfigurationEndpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-CacheClusterUrl
  DNSName:
    Description: The DNS address of the configuration endpoint for the Memcached cache cluster.
    Value: !Join ['', [!Ref SubDomainNameWithDot, ., !ImportValue PublicHostedZoneUrl, .]]
    Export:
      Name: !Sub ${AWS::StackName}-DNSName    
