Description: >
  Sets up the service as web app or api

Parameters:

  AWSAccountDev:
    Description: AWS team account number
    Type: String
    
  ServiceName:
    Description: The service name
    Type: String
    Default: test
  
  VCpu:
    Description: Required cpu to run the container
    Type: String
    Default: 256

  TaskMemory:
    Description: How much memory for instances
    Type: Number
    Default: 512

  HealthCheckPath:
    Description: ELB health check path
    Type: String
    Default: /api/Health

  DesiredCount: 
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1
  
  ImageName:
    Description: The security compliance validator docker image
    Type: String
    Default: dailyopstest

  ImageVersion:
    Description: The security compliance validator docker image version
    Type: String
    Default: "1.0.0"

  EcsCluster:
    Description: The Load Balancer Listener
    Type: String
    Default: do-ecs-infrastructure-EcsCluster
  
  LogGroupName:
    Description: The CloudWatch log group
    Type: String
    Default: "do-ecs-infrastructure-EcsLogs"

  LoadBalancerListener:
    Description: The Load Balancer Listener
    Type: String
    Default: do-ecs-infrastructure-LoadBalancerListener

  LoadBalancerHostedZoneID:
    Description: The Load Balancer Listener
    Type: String
    Default: do-ecs-infrastructure-LoadBalancerHostedZoneID

  LoadBalancerUrl:
    Description: The Load Balancer Listener
    Type: String
    Default: do-ecs-infrastructure-LoadBalancerUrl

  Environment:
    Description: The target deployment environment
    Type: String
    AllowedValues:
      - Development
      - Staging
      - Production

Conditions:
  DeployToAzB: !Or [!Equals [!Ref Environment, Staging], !Equals [!Ref Environment, Production]]
  DeployToAzC: !Equals [!Ref Environment, Production]  

Resources:

# EC2 Service Launch
# Service:
#     Type: AWS::ECS::Service
#     DependsOn: ListenerRule
#     Properties:
#       Cluster: 
#         Fn::ImportValue: !Ref EcsCluster
#       Role: !Ref ServiceRole
#       DesiredCount: !Ref DesiredCount
#       TaskDefinition: !Ref ECSTaskDefinition
#       LoadBalancers:
#         - ContainerName: !Ref ServiceName
#           ContainerPort: 80
#           TargetGroupArn: !Ref TargetGroup

  # Fargate Service Launch
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: !Ref ServiceName
      LaunchType: FARGATE
      Cluster: 
        Fn::ImportValue: !Ref EcsCluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref FargateTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100    
      NetworkConfiguration:
        AwsvpcConfiguration:
        # AssignPublicIp: ENABLED
          SecurityGroups: 
            - !ImportValue do-ecs-infrastructure-EcsHostSecurityGroup
          Subnets:
            - !ImportValue core-vpc-PrivateSubnet1AID
            - !If [DeployToAzB, !ImportValue core-vpc-PrivateSubnet1BID, !Ref "AWS::NoValue"]
            - !If [DeployToAzC, !ImportValue core-vpc-PrivateSubnet1CID, !Ref "AWS::NoValue"]

  # EC2 Task
  # ECSTaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     Family: !Ref ServiceName
  #     ContainerDefinitions:
  #       - Name: !Ref ServiceName
  #         LogConfiguration:
  #             LogDriver: awslogs
  #             Options:
  #               awslogs-group: !Ref LogGroupName
  #               awslogs-region: !Ref AWS::Region
  #               awslogs-stream-prefix: !Ref ServiceName           
  #         Essential: true
  #         Image:
  #           Fn::Join:
  #             - ""
  #             - - !Ref AWSAccountDev
  #               - ".dkr.ecr.eu-west-1.amazonaws.com/"
  #               - !Ref ImageName
  #               - ":"
  #               - !Ref ImageVersion
  #         Memory: !Ref TaskMemory
  #         PortMappings:
  #           - ContainerPort: 80
  
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 30 
      LogGroupName: 
        !Ref LogGroupName

  # Fargate Task
  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref VCpu
      Memory: !Ref TaskMemory
      RequiresCompatibilities:
        - FARGATE
      Family: !Ref ServiceName
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !ImportValue do-ecs-infrastructure-ECSTaskExecutionRole
      ContainerDefinitions:
      - 
        Name: !Ref ServiceName
        Environment:
          - Name: ASPNETCORE_ENVIRONMENT
            Value: !Ref Environment    
        Essential: true
        Image:
          Fn::Join:
            - ""
            - - !Ref AWSAccountDev
              - ".dkr.ecr.eu-west-1.amazonaws.com/"
              - !Ref ImageName
              - ":"
              - !Ref ImageVersion
        LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
        PortMappings:
          - ContainerPort: 80

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue core-vpc-VPCID
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '5'
      TargetType: ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: 
        Fn::ImportValue: !Ref LoadBalancerListener
      Priority: 7
      Conditions:
        - Field: host-header
          Values:
            - !Join ['', [!Ref ServiceName, ., !ImportValue PublicHostedZoneUrl]]
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - arn:aws:logs:*:*:*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: secretmanager-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: '*'
        - PolicyName: cloudwatch-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'

  EcsRecordsetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        Comment: A-record on hosted zone for cd.csawsdev.net.
        HostedZoneId: !ImportValue PublicHostedZone
        RecordSets:
          - Name: !Join ['', [!Ref ServiceName, ., !ImportValue PublicHostedZoneUrl, .]]
            Type: A
            AliasTarget:
              HostedZoneId: 
                Fn::ImportValue: !Ref LoadBalancerHostedZoneID
              DNSName: 
                Fn::ImportValue: !Ref LoadBalancerUrl
